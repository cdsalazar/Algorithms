\documentclass[11pt]{article} %Sets the default text size to 11pt and class to article.
\usepackage{amsmath}
\newcommand{\BigO}[1]{\ensuremath{\operatorname{O}\bigl(#1\bigr)}}
%------------------------Dimensions--------------------------------------------
\topmargin=-.5in %length of margin at the top of the page (1 inch added by default)
\oddsidemargin=-0.2in %length of margin on sides for odd pages
\evensidemargin=0in %length of margin on sides for even pages
\textwidth=6.5in %How wide you want your text to be
\marginparwidth=0.5in
\headheight=0pt %1in margins at top and bottom (1 inch is added to this value by default)
\headsep=0pt %Increase to increase white space in between headers and the top of the page
\textheight=10.0in %How tall the text body is allowed to be on each page
\pagestyle{empty}
\begin{document}
\centerline{{ \LARGE \bf Problem Set 4}} 
\centerline{CSCI 3104 Spring 2014} 
\centerline{Cristobal Salazar}
\centerline{07/22}
\centerline{Partner: Alex Tsankov}

\noindent{\Large \bf Problem 1}
\\
\indent{\large a)  We are assuming the edges on our constructed Huffman binary tree are interpreted as 0 for left, and 1 for right. We also construct the tree from the bottom up, with letters of higher frequency to the right. With these rules in mind our codes for each letter are as follows: }
\\
\\
\begin{tabular}{| l | l | l | l | l | l | l | l |}
\hline

$a:0000000$ & $b:0000001$ & $c:000001$ & $d:00001$ &  $e:0001$ & $f:001$ & $g:01$ & $h:1$ 
\\
\hline
\end{tabular}
\\  

\indent{\large b){ In the first three elements of the list, we have $a:1, b:1, c:2$. This means that adding the $a:1$ and $b:1$ we will get $ab:2$ which is equal to $c:2$. Because these are equal, we can switch them around and still get the same amount of compression. There are $2^2=4$ combinations of Optimal Huffman Codes depending on how we tie-break. Then we can do the same procedure, but mirror the tree. This gives us $1$ more set of optimal codes, then we can do the same permutation on $a:1, b:1,$ and $c:2$ on the mirrored tree to get $4$ more sets of optimal code, and including our own set of codes, we get $10$ total sets of the optimal codes.}
\\

\indent{\large c) The optimal Huffman code for an array of $n$ Fibonacci numbers is: The base case code for a, which we will call $k$, is $n-1$ 0s, for b,$k+1$, it is $n-2$ 0s, followed by a 1. As $k \to \infty$, we can simply do a left bit-shift on $k+1$ equalling difference with $k+1$, while dropping any extraneous zeros on the end.}
\\

\noindent{\Large \bf Problem 2}

\indent{\large a) }
\begin{verbatim}
final = [] \\number of coins in array ordered by val (25,10,5,1)
coins = [25,10,5,1]

int count(val,sum,k){
    int i = sum/val
    sum = sum % val
    if (k <= 2) 
        final[k+1] = count(coins[k+1],sum,k+1)
    return i 
}

final[0] = count(coins[0],sum,0)

\end{verbatim}


\indent{\large b)We can show that this is optimal becuase of the greedy choice property. This means the algorithm will uses the largest denomination of coin possible, before using the next largest, then the next, until we have made change. If $2^j = 2*2^i$, then the algorithm will use one $2^j$ coins, rather than two $2^i$ coins. This is demonstrated below:}
\\
\centerline{ \large $n = \frac{n}{25} = d_1 =$ amount of quarters}

\centerline{$n_1 = n - d_1*25$}
\centerline{$n_2 = n_1 - (10*d_2$)}
\centerline{$n_3 = n_2 - (5*d_3$)}
\centerline{$n_4 = d_4$}

\newpage

\indent{\large c) }
\\

\noindent{\Large \bf Problem 3}
\\
\indent{\large }
\\


\noindent{\Large \bf Sources}
\\
\indent $\bullet$ http://www.bowdoin.edu/~ltoma/teaching/cs231/fall07/Lectures/reccurences.pdf
%this is for 4c
\\
\indent $\bullet$ http://www.cs.unm.edu/~saia/561-f13/lec/lec3.pdf
%this is for 4b


\end{document}
